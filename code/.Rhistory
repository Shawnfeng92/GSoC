# for (i in 1:100) {
#   w <- test("osqp")
#   result <- c(result, mean(data %*% w)/sd(data %*% w))
# }
library(PortfolioAnalytics)
library(quadprog)
library(osqp)
library(Rglpk)
rm(list = ls())
source("~/GitHub/PortfolioAnalytics/R/optimize.portfolio.R")
# Data
data <- read.csv("~/GitHub/GSoC/data/..return.sample.ETF.monthly.csv")
data <- xts(data[,2:ncol(data)], order.by = as.Date(as.character(data[,1]), format = "%m/%d/%Y"))
GSoC.CTA <- portfolio.spec(assets = colnames(data))
GSoC.CTA <- add.constraint(portfolio = GSoC.CTA, type = "weight_sum", min_sum = 1, max_sum = 1)
GSoC.CTA <- add.constraint(portfolio = GSoC.CTA, type = "long_only")
group_list <- list(group1=c(1, 3, 5),
group2=c(2, 4),
groupA=c(2, 4, 5),
groupB=c(1, 3))
GSoC.CTA <- add.constraint(portfolio=GSoC.CTA, type="group",
groups=group_list,
group_min=c(0.15, 0.25, 0.2, 0.1),
group_max=c(0.65, 0.55, 0.5, 0.4))
# GSoC.CTA <- add.constraint(portfolio = GSoC.CTA, type = "return", return_target = 0.07)
GSoC.CTA <- add.objective(GSoC.CTA, type = "return", name = "mean")
GSoC.CTA <- add.objective(GSoC.CTA, type = "risk", name = "StdDev")
methodsList <- c("DEoptim", "random", "pso", "GenSA", "osqp")
test <- function(x) {
result <- optimize.portfolio(R = data, GSoC.CTA, optimize_method = "Rglpk", verbos = 0, alpha = 0.05, rmin = x)
result <- data %*% result$weights
return(mean(result[which(result < quantile(result, 0.05))]))
}
CVaR <- c()
return <- seq(from = -0.01, to = 0.01, length.out = 1000)
for (i in return) {
CVaR <- c(CVaR, test(i))
}
plot( - CVaR, return)
# result <- c()
#
# for (i in methodsList) {
#   start <- Sys.time()
#   w <- test(i)
#   w[which(w<0)] <- 0
#   result <- rbind(result, c(mean(data %*% w),
#                             sd(data %*% w), mean(data %*% w)/sd(data %*% w),
#                             as.numeric(Sys.time() - start, units = "secs"),w))
# }
#
# colnames(result) <- c("mean", "sigma", "sharpe ratio", "running time",colnames(data))
# rownames(result) <- methodsList
#
# result <- round(result*100,2)
# result[,4] <- result[,4]/100
#
# result <- c()
# for (i in 1:100) {
#   w <- test("osqp")
#   result <- c(result, mean(data %*% w)/sd(data %*% w))
# }
library(PortfolioAnalytics)
library(quadprog)
library(osqp)
library(Rglpk)
rm(list = ls())
source("~/GitHub/PortfolioAnalytics/R/optimize.portfolio.R")
# Data
data <- read.csv("~/GitHub/GSoC/data/..return.sample.ETF.monthly.csv")
data <- xts(data[,2:ncol(data)], order.by = as.Date(as.character(data[,1]), format = "%m/%d/%Y"))
GSoC.CTA <- portfolio.spec(assets = colnames(data))
GSoC.CTA <- add.constraint(portfolio = GSoC.CTA, type = "weight_sum", min_sum = 1, max_sum = 1)
GSoC.CTA <- add.constraint(portfolio = GSoC.CTA, type = "long_only")
group_list <- list(group1=c(1, 3, 5),
group2=c(2, 4),
groupA=c(2, 4, 5),
groupB=c(1, 3))
GSoC.CTA <- add.constraint(portfolio=GSoC.CTA, type="group",
groups=group_list,
group_min=c(0.15, 0.25, 0.2, 0.1),
group_max=c(0.65, 0.55, 0.5, 0.4))
# GSoC.CTA <- add.constraint(portfolio = GSoC.CTA, type = "return", return_target = 0.07)
GSoC.CTA <- add.objective(GSoC.CTA, type = "return", name = "mean")
GSoC.CTA <- add.objective(GSoC.CTA, type = "risk", name = "StdDev")
methodsList <- c("DEoptim", "random", "pso", "GenSA", "osqp")
test <- function(x) {
result <- optimize.portfolio(R = data, GSoC.CTA, optimize_method = "Rglpk", verbos = 0, alpha = 0.05, rmin = x)
result <- data %*% result$weights
return(mean(result[which(result < quantile(result, 0.05))]))
}
CVaR <- c()
return <- seq(from = -0.01, to = 0.01, length.out = 1000)
for (i in return) {
CVaR <- c(CVaR, test(i))
}
plot( - CVaR, return, "l")
# result <- c()
#
# for (i in methodsList) {
#   start <- Sys.time()
#   w <- test(i)
#   w[which(w<0)] <- 0
#   result <- rbind(result, c(mean(data %*% w),
#                             sd(data %*% w), mean(data %*% w)/sd(data %*% w),
#                             as.numeric(Sys.time() - start, units = "secs"),w))
# }
#
# colnames(result) <- c("mean", "sigma", "sharpe ratio", "running time",colnames(data))
# rownames(result) <- methodsList
#
# result <- round(result*100,2)
# result[,4] <- result[,4]/100
#
# result <- c()
# for (i in 1:100) {
#   w <- test("osqp")
#   result <- c(result, mean(data %*% w)/sd(data %*% w))
# }
library(PortfolioAnalytics)
library(quadprog)
library(osqp)
library(Rglpk)
rm(list = ls())
source("~/GitHub/PortfolioAnalytics/R/optimize.portfolio.R")
# Data
data <- read.csv("~/GitHub/GSoC/data/..return.etf.monthly.csv")
data <- xts(data[,2:ncol(data)], order.by = as.Date(as.character(data[,1]), format = "%m/%d/%Y"))
GSoC.CTA <- portfolio.spec(assets = colnames(data))
GSoC.CTA <- add.constraint(portfolio = GSoC.CTA, type = "weight_sum", min_sum = 1, max_sum = 1)
GSoC.CTA <- add.constraint(portfolio = GSoC.CTA, type = "long_only")
group_list <- list(group1=c(1, 3, 5),
group2=c(2, 4),
groupA=c(2, 4, 5),
groupB=c(1, 3))
GSoC.CTA <- add.constraint(portfolio=GSoC.CTA, type="group",
groups=group_list,
group_min=c(0.15, 0.25, 0.2, 0.1),
group_max=c(0.65, 0.55, 0.5, 0.4))
# GSoC.CTA <- add.constraint(portfolio = GSoC.CTA, type = "return", return_target = 0.07)
GSoC.CTA <- add.objective(GSoC.CTA, type = "return", name = "mean")
GSoC.CTA <- add.objective(GSoC.CTA, type = "risk", name = "StdDev")
methodsList <- c("DEoptim", "random", "pso", "GenSA", "osqp")
test <- function(x) {
result <- optimize.portfolio(R = data, GSoC.CTA, optimize_method = "Rglpk", verbos = 0, alpha = 0.05, rmin = x)
result <- data %*% result$weights
return(mean(result[which(result < quantile(result, 0.05))]))
}
CVaR <- c()
return <- seq(from = -0.01, to = 0.01, length.out = 100)
for (i in return) {
CVaR <- c(CVaR, test(i))
}
plot( - CVaR, return, "l")
library(PortfolioAnalytics)
library(quadprog)
library(osqp)
library(Rglpk)
rm(list = ls())
source("~/GitHub/PortfolioAnalytics/R/optimize.portfolio.R")
# Data
data <- read.csv("~/GitHub/GSoC/data/..return.etf.monthly.csv")
data <- xts(data[,2:ncol(data)], order.by = as.Date(as.character(data[,1]), format = "%m/%d/%Y"))
GSoC.CTA <- portfolio.spec(assets = colnames(data))
GSoC.CTA <- add.constraint(portfolio = GSoC.CTA, type = "weight_sum", min_sum = 1, max_sum = 1)
GSoC.CTA <- add.constraint(portfolio = GSoC.CTA, type = "long_only")
group_list <- list(group1=c(1, 3, 5),
group2=c(2, 4),
groupA=c(2, 4, 5),
groupB=c(1, 3))
GSoC.CTA <- add.constraint(portfolio=GSoC.CTA, type="group",
groups=group_list,
group_min=c(0.15, 0.25, 0.2, 0.1),
group_max=c(0.65, 0.55, 0.5, 0.4))
# GSoC.CTA <- add.constraint(portfolio = GSoC.CTA, type = "return", return_target = 0.07)
GSoC.CTA <- add.objective(GSoC.CTA, type = "return", name = "mean")
GSoC.CTA <- add.objective(GSoC.CTA, type = "risk", name = "StdDev")
methodsList <- c("DEoptim", "random", "pso", "GenSA", "osqp")
test <- function(x) {
result <- optimize.portfolio(R = data, GSoC.CTA, optimize_method = "Rglpk", verbos = 0, alpha = 0.05, rmin = x)
result <- data %*% result$weights
return(mean(result[which(result < quantile(result, 0.05))]))
}
CVaR <- c()
return <- seq(from = -0.01, to = 0.01, length.out = 1000)
for (i in return) {
CVaR <- c(CVaR, test(i))
}
plot( - CVaR, return, "l")
library(PortfolioAnalytics)
library(quadprog)
library(osqp)
library(Rglpk)
rm(list = ls())
source("~/GitHub/PortfolioAnalytics/R/optimize.portfolio.R")
# Data
data <- read.csv("~/GitHub/GSoC/data/..return.etf.monthly.csv")
data <- xts(data[,2:ncol(data)], order.by = as.Date(as.character(data[,1]), format = "%m/%d/%Y"))
GSoC.CTA <- portfolio.spec(assets = colnames(data))
GSoC.CTA <- add.constraint(portfolio = GSoC.CTA, type = "weight_sum", min_sum = 0, max_sum = 1)
GSoC.CTA <- add.constraint(portfolio = GSoC.CTA, type = "long_only")
group_list <- list(group1=c(1, 3, 5),
group2=c(2, 4),
groupA=c(2, 4, 5),
groupB=c(1, 3))
GSoC.CTA <- add.constraint(portfolio=GSoC.CTA, type="group",
groups=group_list,
group_min=c(0.15, 0.25, 0.2, 0.1),
group_max=c(0.65, 0.55, 0.5, 0.4))
# GSoC.CTA <- add.constraint(portfolio = GSoC.CTA, type = "return", return_target = 0.07)
GSoC.CTA <- add.objective(GSoC.CTA, type = "return", name = "mean")
GSoC.CTA <- add.objective(GSoC.CTA, type = "risk", name = "StdDev")
methodsList <- c("DEoptim", "random", "pso", "GenSA", "osqp")
test <- function(x) {
result <- optimize.portfolio(R = data, GSoC.CTA, optimize_method = "Rglpk", verbos = 0, alpha = 0.05, rmin = x)
result <- data %*% result$weights
return(mean(result[which(result < quantile(result, 0.05))]))
}
CVaR <- c()
return <- seq(from = -0.01, to = 0.01, length.out = 10)
for (i in return) {
CVaR <- c(CVaR, test(i))
}
plot( - CVaR, return, "l")
library(PortfolioAnalytics)
library(quadprog)
library(osqp)
library(Rglpk)
rm(list = ls())
source("~/GitHub/PortfolioAnalytics/R/optimize.portfolio.R")
# Data
data <- read.csv("~/GitHub/GSoC/data/..return.sample.ETF.monthly.csv")
data <- xts(data[,2:ncol(data)], order.by = as.Date(as.character(data[,1]), format = "%m/%d/%Y"))
GSoC.CTA <- portfolio.spec(assets = colnames(data))
GSoC.CTA <- add.constraint(portfolio = GSoC.CTA, type = "weight_sum", min_sum = 0, max_sum = 1)
GSoC.CTA <- add.constraint(portfolio = GSoC.CTA, type = "long_only")
group_list <- list(group1=c(1, 3, 5),
group2=c(2, 4),
groupA=c(2, 4, 5),
groupB=c(1, 3))
GSoC.CTA <- add.constraint(portfolio=GSoC.CTA, type="group",
groups=group_list,
group_min=c(0.15, 0.25, 0.2, 0.1),
group_max=c(0.65, 0.55, 0.5, 0.4))
# GSoC.CTA <- add.constraint(portfolio = GSoC.CTA, type = "return", return_target = 0.07)
GSoC.CTA <- add.objective(GSoC.CTA, type = "return", name = "mean")
GSoC.CTA <- add.objective(GSoC.CTA, type = "risk", name = "StdDev")
methodsList <- c("DEoptim", "random", "pso", "GenSA", "osqp")
test <- function(x) {
result <- optimize.portfolio(R = data, GSoC.CTA, optimize_method = "Rglpk", verbos = 0, alpha = 0.05, rmin = x)
result <- data %*% result$weights
return(mean(result[which(result < quantile(result, 0.05))]))
}
CVaR <- c()
return <- seq(from = -0.01, to = 0.01, length.out = 10)
for (i in return) {
CVaR <- c(CVaR, test(i))
}
plot( - CVaR, return, "l")
# result <- c()
#
# for (i in methodsList) {
#   start <- Sys.time()
#   w <- test(i)
#   w[which(w<0)] <- 0
#   result <- rbind(result, c(mean(data %*% w),
#                             sd(data %*% w), mean(data %*% w)/sd(data %*% w),
#                             as.numeric(Sys.time() - start, units = "secs"),w))
# }
#
# colnames(result) <- c("mean", "sigma", "sharpe ratio", "running time",colnames(data))
# rownames(result) <- methodsList
#
# result <- round(result*100,2)
# result[,4] <- result[,4]/100
#
# result <- c()
# for (i in 1:100) {
#   w <- test("osqp")
#   result <- c(result, mean(data %*% w)/sd(data %*% w))
# }
library(PortfolioAnalytics)
library(quadprog)
library(osqp)
library(Rglpk)
rm(list = ls())
source("~/GitHub/PortfolioAnalytics/R/optimize.portfolio.R")
# Data
data <- read.csv("~/GitHub/GSoC/data/.combined.csv")
data <- xts(data[,2:ncol(data)], order.by = as.Date(as.character(data[,1]), format = "%m/%d/%Y"))
GSoC.CTA <- portfolio.spec(assets = colnames(data))
GSoC.CTA <- add.constraint(portfolio = GSoC.CTA, type = "weight_sum", min_sum = 0, max_sum = 1)
GSoC.CTA <- add.constraint(portfolio = GSoC.CTA, type = "long_only")
group_list <- list(group1=c(1, 3, 5),
group2=c(2, 4),
groupA=c(2, 4, 5),
groupB=c(1, 3))
GSoC.CTA <- add.constraint(portfolio=GSoC.CTA, type="group",
groups=group_list,
group_min=c(0.15, 0.25, 0.2, 0.1),
group_max=c(0.65, 0.55, 0.5, 0.4))
# GSoC.CTA <- add.constraint(portfolio = GSoC.CTA, type = "return", return_target = 0.07)
GSoC.CTA <- add.objective(GSoC.CTA, type = "return", name = "mean")
GSoC.CTA <- add.objective(GSoC.CTA, type = "risk", name = "StdDev")
methodsList <- c("DEoptim", "random", "pso", "GenSA", "osqp")
test <- function(x) {
result <- optimize.portfolio(R = data, GSoC.CTA, optimize_method = "Rglpk", verbos = 0, alpha = 0.05, rmin = x)
result <- data %*% result$weights
return(mean(result[which(result < quantile(result, 0.05))]))
}
CVaR <- c()
return <- seq(from = -0.01, to = 0.01, length.out = 10)
for (i in return) {
CVaR <- c(CVaR, test(i))
}
plot( - CVaR, return, "l")
# result <- c()
#
# for (i in methodsList) {
#   start <- Sys.time()
#   w <- test(i)
#   w[which(w<0)] <- 0
#   result <- rbind(result, c(mean(data %*% w),
#                             sd(data %*% w), mean(data %*% w)/sd(data %*% w),
#                             as.numeric(Sys.time() - start, units = "secs"),w))
# }
#
# colnames(result) <- c("mean", "sigma", "sharpe ratio", "running time",colnames(data))
# rownames(result) <- methodsList
#
# result <- round(result*100,2)
# result[,4] <- result[,4]/100
#
# result <- c()
# for (i in 1:100) {
#   w <- test("osqp")
#   result <- c(result, mean(data %*% w)/sd(data %*% w))
# }
install.packages("stocks")
library(stock)
library(stocks)
??vanguard_bond_etfs
vanguard_bond_etfs()
library(doParallel)
library(foreach)
cl <- makeCluster(8)
registerDoParallel(cl)
library(doParallel)
library(foreach)
cl <- makeCluster(8)
registerDoParallel(cl)
stopCluster(cl)
"A" + 1
install.packages("Quandl")
library(doParallel)
library(foreach)
library(quantmod)
library(Quandl)
library(doParallel)
library(foreach)
library(quantmod)
library(Quandl)
tickerList <- c()
quandl.api("dU-ukkHjcYwUsDqmcvjB")
library(doParallel)
library(foreach)
library(quantmod)
library(Quandl)
Quandl.api_key("dU-ukkHjcYwUsDqmcvjB")
toString((1))
toString(1
)
chr(12)
install.packages("gtool")
install.packages("gtools")
library(doParallel)
library(foreach)
library(quantmod)
library(Quandl)
library(gtools)
arc(12)
asc(12)
chr(12:13)
chr(12)
chr(65)
chr(65:(65+25))
letter <- chr(65:90)
"1" + "2"
paste0("1","2")
library(doParallel)
library(foreach)
library(quantmod)
library(Quandl)
library(gtools)
Quandl.api_key("dU-ukkHjcYwUsDqmcvjB")
letter <- chr(65:90)
tickerList <- c()
for (i in 1:4) {
}
library(doParallel)
library(foreach)
library(quantmod)
library(Quandl)
library(gtools)
Quandl.api_key("dU-ukkHjcYwUsDqmcvjB")
letter <- chr(65:90)
tickerList <- c()
for (i in 1:4) {
temp <- c()
for (j in tickerList) {
for (k in letter) {
temp <- c(temp, paste0(j,k))
}
}
tickerList <- temp
}
library(doParallel)
library(foreach)
library(quantmod)
library(Quandl)
library(gtools)
Quandl.api_key("dU-ukkHjcYwUsDqmcvjB")
letter <- chr(65:90)
tickerList <- letter
for (i in 1:3) {
temp <- c()
for (j in tickerList) {
for (k in letter) {
temp <- c(temp, paste0(j,k))
}
}
tickerList <- temp
}
library(doParallel)
library(foreach)
library(quantmod)
library(Quandl)
library(gtools)
Quandl.api_key("dU-ukkHjcYwUsDqmcvjB")
letter <- chr(65:90)
tickerList <- letter
for (i in 1:3) {
temp <- c()
foreach (j = tickerList) %dopar% {
foreach (k = letter) %dopar% {
temp <- c(temp, paste0(j,k))
}
}
tickerList <- temp
}
library(doParallel)
library(foreach)
library(quantmod)
library(Quandl)
library(gtools)
Quandl.api_key("dU-ukkHjcYwUsDqmcvjB")
letter <- chr(65:90)
tickerList <- letter
cl <- makeCluster(8)
registerDoParallel(cl)
for (i in 1:2) {
temp <- c()
foreach (j = tickerList) %dopar% {
foreach (k = letter) %dopar% {
temp <- c(temp, paste0(j,k))
}
}
tickerList <- temp
}
data <- c()
stopCluster(cl)
library(doParallel)
library(foreach)
library(quantmod)
library(Quandl)
library(gtools)
Quandl.api_key("dU-ukkHjcYwUsDqmcvjB")
letter <- chr(65:90)
tickerList <- letter
cl <- makeCluster(8)
registerDoParallel(cl)
for (i in 1:2) {
temp <- c()
foreach (j = tickerList, .packages = "foreach") %dopar% {
foreach (k = letter) %dopar% {
temp <- c(temp, paste0(j,k))
}
}
tickerList <- temp
}
data <- c()
stopCluster(cl)
library(doParallel)
library(foreach)
library(quantmod)
library(Quandl)
library(gtools)
Quandl.api_key("dU-ukkHjcYwUsDqmcvjB")
letter <- chr(65:90)
tickerList <- letter
cl <- makeCluster(8)
registerDoParallel(cl)
for (i in 1:4) {
temp <- c()
foreach (j = tickerList) %dopar% {
for (k in letter) {
temp <- c(temp, paste0(j,k))
}
}
tickerList <- temp
}
data <- c()
stopCluster(cl)
