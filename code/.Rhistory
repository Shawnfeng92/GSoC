library(doParallel)
library(foreach)
cl <- makeCluster(8)
registerDoParallel(cl)
stopCluster(cl)
"A" + 1
install.packages("Quandl")
library(doParallel)
library(foreach)
library(quantmod)
library(Quandl)
library(doParallel)
library(foreach)
library(quantmod)
library(Quandl)
tickerList <- c()
quandl.api("dU-ukkHjcYwUsDqmcvjB")
library(doParallel)
library(foreach)
library(quantmod)
library(Quandl)
Quandl.api_key("dU-ukkHjcYwUsDqmcvjB")
toString((1))
toString(1
)
chr(12)
install.packages("gtool")
install.packages("gtools")
library(doParallel)
library(foreach)
library(quantmod)
library(Quandl)
library(gtools)
arc(12)
asc(12)
chr(12:13)
chr(12)
chr(65)
chr(65:(65+25))
letter <- chr(65:90)
"1" + "2"
paste0("1","2")
library(doParallel)
library(foreach)
library(quantmod)
library(Quandl)
library(gtools)
Quandl.api_key("dU-ukkHjcYwUsDqmcvjB")
letter <- chr(65:90)
tickerList <- c()
for (i in 1:4) {
}
library(doParallel)
library(foreach)
library(quantmod)
library(Quandl)
library(gtools)
Quandl.api_key("dU-ukkHjcYwUsDqmcvjB")
letter <- chr(65:90)
tickerList <- c()
for (i in 1:4) {
temp <- c()
for (j in tickerList) {
for (k in letter) {
temp <- c(temp, paste0(j,k))
}
}
tickerList <- temp
}
library(doParallel)
library(foreach)
library(quantmod)
library(Quandl)
library(gtools)
Quandl.api_key("dU-ukkHjcYwUsDqmcvjB")
letter <- chr(65:90)
tickerList <- letter
for (i in 1:3) {
temp <- c()
for (j in tickerList) {
for (k in letter) {
temp <- c(temp, paste0(j,k))
}
}
tickerList <- temp
}
library(doParallel)
library(foreach)
library(quantmod)
library(Quandl)
library(gtools)
Quandl.api_key("dU-ukkHjcYwUsDqmcvjB")
letter <- chr(65:90)
tickerList <- letter
for (i in 1:3) {
temp <- c()
foreach (j = tickerList) %dopar% {
foreach (k = letter) %dopar% {
temp <- c(temp, paste0(j,k))
}
}
tickerList <- temp
}
library(doParallel)
library(foreach)
library(quantmod)
library(Quandl)
library(gtools)
Quandl.api_key("dU-ukkHjcYwUsDqmcvjB")
letter <- chr(65:90)
tickerList <- letter
cl <- makeCluster(8)
registerDoParallel(cl)
for (i in 1:2) {
temp <- c()
foreach (j = tickerList) %dopar% {
foreach (k = letter) %dopar% {
temp <- c(temp, paste0(j,k))
}
}
tickerList <- temp
}
data <- c()
stopCluster(cl)
library(doParallel)
library(foreach)
library(quantmod)
library(Quandl)
library(gtools)
Quandl.api_key("dU-ukkHjcYwUsDqmcvjB")
letter <- chr(65:90)
tickerList <- letter
cl <- makeCluster(8)
registerDoParallel(cl)
for (i in 1:2) {
temp <- c()
foreach (j = tickerList, .packages = "foreach") %dopar% {
foreach (k = letter) %dopar% {
temp <- c(temp, paste0(j,k))
}
}
tickerList <- temp
}
data <- c()
stopCluster(cl)
library(doParallel)
library(foreach)
library(quantmod)
library(Quandl)
library(gtools)
Quandl.api_key("dU-ukkHjcYwUsDqmcvjB")
letter <- chr(65:90)
tickerList <- letter
cl <- makeCluster(8)
registerDoParallel(cl)
for (i in 1:4) {
temp <- c()
foreach (j = tickerList) %dopar% {
for (k in letter) {
temp <- c(temp, paste0(j,k))
}
}
tickerList <- temp
}
data <- c()
stopCluster(cl)
install.packages(c("PortfolioAnalytics", "quadprog"))
library(PortfolioAnalytics)
library(quadprog)
library(osqp)
library(Rglpk)
rm(list = ls())
source("~/GitHub/PortfolioAnalytics/R/optimize.portfolio.R")
# Data
data <- read.csv("~/Documents/GitHub/GSoC/data/all.csv")
data <- xts(data[,2:ncol(data)], order.by = as.Date(as.character(data[,1]), format = "%m/%d/%Y"))
library(PortfolioAnalytics)
library(quadprog)
library(osqp)
library(Rglpk)
rm(list = ls())
source("~/Documents/GitHub/PortfolioAnalytics/R/optimize.portfolio.R")
library(PortfolioAnalytics)
library(quadprog)
library(osqp)
library(Rglpk)
rm(list = ls())
source("~/Documents/GitHub/PortfolioAnalytics/R/optimize.portfolio.R")
# Data
data <- read.csv("~/Documents/GitHub/GSoC/data/all.csv")
data <- xts(data[,2:ncol(data)], order.by = as.Date(as.character(data[,1]), format = "%m/%d/%Y"))
GSoC.CTA <- portfolio.spec(assets = colnames(data))
GSoC.CTA <- add.constraint(portfolio = GSoC.CTA, type = "weight_sum", min_sum = -1, max_sum = 1)
GSoC.CTA <- add.constraint(portfolio = GSoC.CTA, type = "long_only")
# group_list <- list(group1=c(1, 3, 5),
#                    group2=c(2, 4),
#                    groupA=c(2, 4, 5),
#                    groupB=c(1, 3))
# GSoC.CTA <- add.constraint(portfolio=GSoC.CTA, type="group",
#                         groups=group_list,
#                         group_min=c(0.15, 0.25, 0.2, 0.1),
#                         group_max=c(0.65, 0.55, 0.5, 0.4))
# GSoC.CTA <- add.constraint(portfolio = GSoC.CTA, type = "return", return_target = 0.07)
GSoC.CTA <- add.objective(GSoC.CTA, type = "return", name = "mean")
GSoC.CTA <- add.objective(GSoC.CTA, type = "risk", name = "StdDev")
methodsList <- c("DEoptim", "random", "pso", "GenSA", "osqp")
test <- function(x) {
result <- optimize.portfolio(R = data, GSoC.CTA, optimize_method = "Rglpk", verbos = 0, alpha = 0.05)
result <- data %*% result$weights
return(mean(result[which(result < quantile(result, 0.05))]))
}
optimize.portfolio(R = data, GSoC.CTA, optimize_method = "osqp")
library(mice)
install.packages("mice")
library(doParallel)
library(foreach)
library(quantmod)
library(Quandl)
library(gtools)
library(rvest)
library(mice)
# data collection ----
collect <- function(){
Quandl.api_key("dU-ukkHjcYwUsDqmcvjB")
cl <- makeCluster(8)
registerDoParallel(cl)
time1 <- system.time(
stocklist <- foreach(x = chr(65:90), .combine = "c", .packages = "rvest") %dopar%
{
url <- paste0('http://eoddata.com/stocklist/NYSE/', x, '.htm')
webpage <- read_html(url)
stockhtml <- html_nodes(webpage,'a')
stock <- html_text(stockhtml)
stock <- stock[43:length(stock)]
stock <- stock[1:(which(stock == "Register")-1)]
stock <- stock[which(stock != "")]
stock <- stock[!grepl("-", stock)]
stock <- stock[!grepl(".", stock, fixed = 1)]
}
)
write.csv(stocklist,"Documents/GitHub/GSoC/data/tickers.csv")
time2 <- system.time(
dataset <- foreach(i = stocklist, .combine = "cbind", .packages = "quantmod") %dopar% {
temp <- try(getSymbols(i, source="yahoo", auto.assign=FALSE, return.class="xts")[,6])
if (class(temp) != "try-error") {
colnames(temp) <- c(i)
temp
} else {
temp <- NA
}
}
)
stopCluster(cl)
write.zoo(dataset, "Documents/GitHub/GSoC/data/all.csv", sep = ",")
}
# choose suitable data ----
# collect()
dataset <- read.csv(file = "~/Documents/GitHub/GSoC/data/all.csv")
dataset <- xts(dataset[,2:ncol(dataset)], as.Date(dataset[,1], "%m/%d/%y"))
imputed_Data <- complete(mice(dataset, m=1, maxit = 1, method = 'pmm', seed = 500))
dataset <- diff(dataset)
View(dataset)
dim(dataset[,which(apply(dataset, 2, FUN = function(x) sum(is.na(x)))<1000)])
dim(dataset[,which(apply(dataset, 2, FUN = function(x) sum(is.na(x)))<500)])
dim(dataset[,which(apply(dataset, 2, FUN = function(x) sum(is.na(x)))<100)])
dim(dataset[,which(apply(dataset, 2, FUN = function(x) sum(is.na(x)))<1)])
dim(dataset[,which(apply(dataset, 2, FUN = function(x) sum(is.na(x)))<2)])
dim(dataset)
dim(dataset[,which(apply(dataset, 2, FUN = function(x) sum(is.na(x))) < 300)])
imputed_Data <- complete(mice(dataset[,1], m=1, maxit = 1, method = 'pmm', seed = 500))
imputed_Data <- complete(mice(dataset[,1:2], m=1, maxit = 1, method = 'pmm', seed = 500))
View(imputed_Data)
dataset <- dataset[,which(apply(dataset, 2, FUN = function(x) sum(is.na(x))) < 300)]
View(dataset)
View(dataset)
apply(dataset,2,mean)
apply(dataset,2, FUN = function(x) mean(x, na.rm = 1))
hist(apply(dataset,2, FUN = function(x) mean(x, na.rm = 1)))
hist(apply(dataset,2, FUN = function(x) mean(x, na.rm = 1)))
hist(apply(dataset,2, FUN = function(x) mean(x, na.rm = 1)), breaks = 15)
hist(apply(dataset,2, FUN = function(x) mean(x, na.rm = 1)), breaks = 101)
hist(apply(dataset,2, FUN = function(x) mean(x, na.rm = 1)), breaks = 301)
rm("imputed_Data")
install.packages("doSNOW")
pack <- c("PortfolioAnalytics", "quadprog", "osqp", "Rglpk",
"DEoptim", "foreach", "doSNOW", "doParallel")
library(PortfolioAnalytics)
library(quadprog)
library(osqp)
library(Rglpk)
library(DEoptim)
library(foreach)
library(doSNOW)
rm(list = ls())
pack <- c("PortfolioAnalytics", "quadprog", "osqp", "Rglpk",
"DEoptim", "foreach", "doSNOW", "doParallel")
library(PortfolioAnalytics)
library(quadprog)
library(osqp)
library(Rglpk)
library(DEoptim)
library(foreach)
library(doSNOW)
rm(list = ls())
source("~/Documents/GitHub/PortfolioAnalytics/R/optimize.portfolio.R")
data <- read.csv("~/Documents/GitHub/GSoC/data/fake.csv")
data <- xts(data[,2:ncol(data)], order.by = as.Date(as.character(data[,1]), format = "%Y-%m-%d"))
testdata <- data[,sample(1:1500, 20)]
GSoC.CTA <- portfolio.spec(assets = colnames(testdata))
GSoC.CTA <- add.constraint(portfolio = GSoC.CTA, type = "weight_sum", min_sum = -1, max_sum = 1)
GSoC.CTA <- add.constraint(portfolio = GSoC.CTA, type = "long_only")
group_list <- list(group1=c(1, 3, 5),
group2=c(2, 4),
groupA=c(2, 4, 5),
groupB=c(1, 3))
GSoC.CTA <- add.constraint(portfolio=GSoC.CTA, type="group",
groups=group_list,
group_min=c(0.15, 0.25, 0.2, 0.1),
group_max=c(0.65, 0.55, 0.5, 0.4))
GSoC.CTA <- add.objective(GSoC.CTA, type = "return", name = "mean")
GSoC.CTA <- add.objective(GSoC.CTA, type = "risk", name = "CVaR")
methodsList <- c("DEoptim", "random", "pso", "GenSA", "Rglpk")
sharpetest <- function(x, sample) {
time <- system.time(result <- optimize.portfolio(R = sample,
GSoC.CTA, optimize_method = x,
verbos = 0))
returns <- sample %*% result$weights
result <- c(x, round(c(time[3], mean(returns)/sd(returns),
result$weights),2))
names(result) <- c("method", "time", "Ratio", colnames(sample))
return(result)
}
CVaRtest <- function(x, sample) {
time <- system.time(result <- optimize.portfolio(R = sample,
GSoC.CTA, optimize_method = x,
verbos = 0, alpha = 0.05))
returns <- sample %*% result$weights
result <- c(x, round(c(time[3], mean(returns), mean(returns[which(returns < quantile(returns, 0.05))]),
mean(returns)/mean(returns[which(returns < quantile(returns, 0.05))]),
result$weights),2))
names(result) <- c("method", "time", "mean", "ES", "Ratio", colnames(sample))
return(result)
}
cl <- makeCluster(8)
registerDoSNOW(cl)
iterations <- 5
pb <- txtProgressBar(max = iterations, style = 3)
progress <- function(n) setTxtProgressBar(pb, n)
opts <- list(progress = progress)
result <- foreach(i = 1:iterations, .combine = cbind, .options.snow = opts,
.packages = c("Rglpk", "PortfolioAnalytics")) %dopar%
{
CVaRtest(methodsList[i], testdata)
}
close(pb)
stopCluster(cl)
pack <- c("PortfolioAnalytics", "quadprog", "osqp", "Rglpk",
"DEoptim", "foreach", "doSNOW", "doParallel")
library(PortfolioAnalytics)
library(quadprog)
library(osqp)
library(Rglpk)
library(DEoptim)
library(foreach)
library(doSNOW)
rm(list = ls())
source("~/GitHub/PortfolioAnalytics/R/optimize.portfolio.R")
data <- read.csv("~/GitHub/GSoC/data/fake.csv")
pack <- c("PortfolioAnalytics", "quadprog", "osqp", "Rglpk",
"DEoptim", "foreach", "doSNOW", "doParallel")
library(PortfolioAnalytics)
library(quadprog)
library(osqp)
library(Rglpk)
library(DEoptim)
library(foreach)
library(doSNOW)
rm(list = ls())
source("~/GitHub/PortfolioAnalytics/R/optimize.portfolio.R")
data <- read.csv("~/GitHub/GSoC/data/fake.csv")
data <- xts(data[,2:ncol(data)], order.by = as.Date(as.character(data[,1]), format = "%Y-%m-%d"))
testdata <- data[,sample(1:1500, 20)]
GSoC.CTA <- portfolio.spec(assets = colnames(testdata))
GSoC.CTA <- add.constraint(portfolio = GSoC.CTA, type = "weight_sum", min_sum = -1, max_sum = 1)
GSoC.CTA <- add.constraint(portfolio = GSoC.CTA, type = "long_only")
group_list <- list(group1=c(1, 3, 5),
group2=c(2, 4),
groupA=c(2, 4, 5),
groupB=c(1, 3))
GSoC.CTA <- add.constraint(portfolio=GSoC.CTA, type="group",
groups=group_list,
group_min=c(0.15, 0.25, 0.2, 0.1),
group_max=c(0.65, 0.55, 0.5, 0.4))
GSoC.CTA <- add.objective(GSoC.CTA, type = "return", name = "mean")
GSoC.CTA <- add.objective(GSoC.CTA, type = "risk", name = "CVaR")
methodsList <- c("DEoptim", "random", "pso", "GenSA", "Rglpk")
sharpetest <- function(x, sample) {
time <- system.time(result <- optimize.portfolio(R = sample,
GSoC.CTA, optimize_method = x,
verbos = 0))
returns <- sample %*% result$weights
result <- c(x, round(c(time[3], mean(returns)/sd(returns),
result$weights),2))
names(result) <- c("method", "time", "Ratio", colnames(sample))
return(result)
}
CVaRtest <- function(x, sample) {
time <- system.time(result <- optimize.portfolio(R = sample,
GSoC.CTA, optimize_method = x,
verbos = 0, alpha = 0.05))
returns <- sample %*% result$weights
result <- c(x, round(c(time[3], mean(returns), mean(returns[which(returns < quantile(returns, 0.05))]),
mean(returns)/mean(returns[which(returns < quantile(returns, 0.05))]),
result$weights),2))
names(result) <- c("method", "time", "mean", "ES", "Ratio", colnames(sample))
return(result)
}
cl <- makeCluster(8)
registerDoSNOW(cl)
iterations <- 5
pb <- txtProgressBar(max = iterations, style = 3)
progress <- function(n) setTxtProgressBar(pb, n)
opts <- list(progress = progress)
result <- foreach(i = 1:iterations, .combine = cbind, .options.snow = opts,
.packages = c("Rglpk", "PortfolioAnalytics")) %dopar%
{
CVaRtest(methodsList[i], testdata)
}
close(pb)
stopCluster(cl)
results
result
getwd()
write.csv(result, "week2.csv")
pack <- c("PortfolioAnalytics", "quadprog", "osqp", "Rglpk",
"DEoptim", "foreach", "doSNOW", "doParallel")
library(PortfolioAnalytics)
library(quadprog)
library(osqp)
library(Rglpk)
library(DEoptim)
library(foreach)
library(doSNOW)
rm(list = ls())
source("~/GitHub/PortfolioAnalytics/R/optimize.portfolio.R")
data <- read.csv("~/GitHub/GSoC/data/fake.csv")
data <- xts(data[,2:ncol(data)], order.by = as.Date(as.character(data[,1]), format = "%Y-%m-%d"))
testdata <- data[,sample(1:1500, 20)]
GSoC.CTA <- portfolio.spec(assets = colnames(testdata))
GSoC.CTA <- add.constraint(portfolio = GSoC.CTA, type = "weight_sum", min_sum = -1, max_sum = 1)
GSoC.CTA <- add.constraint(portfolio = GSoC.CTA, type = "long_only")
group_list <- list(group1=c(1, 3, 5),
group2=c(2, 4),
groupA=c(2, 4, 5),
groupB=c(1, 3))
GSoC.CTA <- add.constraint(portfolio=GSoC.CTA, type="group",
groups=group_list,
group_min=c(0.15, 0.25, 0.2, 0.1),
group_max=c(0.65, 0.55, 0.5, 0.4))
GSoC.CTA <- add.objective(GSoC.CTA, type = "return", name = "mean")
GSoC.CTA <- add.objective(GSoC.CTA, type = "risk", name = "CVaR")
methodsList <- c("DEoptim", "random", "pso", "GenSA", "Rglpk")
sharpetest <- function(x, sample) {
time <- system.time(result <- optimize.portfolio(R = sample,
GSoC.CTA, optimize_method = x,
verbos = 0))
returns <- sample %*% result$weights
result <- c(x, round(c(time[3], mean(returns)/sd(returns),
result$weights),2))
names(result) <- c("method", "time", "Ratio", colnames(sample))
return(result)
}
CVaRtest <- function(x, sample) {
time <- system.time(result <- optimize.portfolio(R = sample,
GSoC.CTA, optimize_method = x,
verbos = 0, alpha = 0.05))
returns <- sample %*% result$weights
result <- c(x, round(c(time[3], mean(returns), mean(returns[which(returns < quantile(returns, 0.05))]),
mean(returns)/mean(returns[which(returns < quantile(returns, 0.05))]),
result$weights),2))
names(result) <- c("method", "time", "mean", "ES", "Ratio", colnames(sample))
return(result)
}
cl <- makeCluster(16)
registerDoSNOW(cl)
iterations <- 5
pb <- txtProgressBar(max = iterations, style = 3)
progress <- function(n) setTxtProgressBar(pb, n)
opts <- list(progress = progress)
result <- foreach(i = 1:iterations, .combine = cbind, .options.snow = opts,
.packages = c("Rglpk", "PortfolioAnalytics")) %dopar%
{
CVaRtest(methodsList[i], testdata)
}
close(pb)
stopCluster(cl)
result
dim(testdata)
cl <- makeCluster(16)
registerDoSNOW(cl)
iterations <- 1600
pb <- txtProgressBar(max = iterations, style = 3)
progress <- function(n) setTxtProgressBar(pb, n)
opts <- list(progress = progress)
result <- foreach(i = 1:iterations, .combine = cbind, .options.snow = opts,
.packages = c("Rglpk", "PortfolioAnalytics")) %dopar%
{
CVaRtest(methodsList[5], testdata)
}
close(pb)
stopCluster(cl)
View(result)
