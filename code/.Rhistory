install.packages("PortfolioAnalytics")
library(PortfolioAnalytics)
??PortfolioAnalytics
install.packages("PerformanceAnalytics")
install.packages("PerformanceAnalytics")
install.packages("PerformanceAnalytics")
install.packages("PerformanceAnalytics")
install.packages("PerformanceAnalytic")
install.packages("PerformanceAnalytics")
install.packages("PerformanceAnalytics")
install.packages(foreach"")
install.packages("foreach")
install.packages("iterators")
library(PortfolioAnalytics)
library(mice)
library(zoo)
library(xts)
library(rootSolve)
# Data----
result <- read.csv(".combined.csv")
result1 <- result[,2:13]
imputed_Data <- mice(result1, m=1, maxit = 50, method = 'pmm', seed = 500)
result[,2:13] <- complete(imputed_Data)
combinedData <- result
combinedData[,1] <- as.Date(as.character(combinedData[,1]), format='%m/%d/%Y')
combinedData <- as.xts(combinedData[,2:13],combinedData[,1])
rm(result, result1, imputed_Data)
View(combinedData)
data(edhec)
R <- edhec[,1:4]
ac.ranking(R, c(2, 3, 1, 4))
R
ac.ranking(R, c(2, 3, 1, 4))
ac.ranking(R, c(1))
ac.ranking(R, c(1,2,3,4))
View(R)
ac.ranking(R)
ac.ranking(R, c(1,2,3,4))
mean(R[,1])
ac.ranking(R, c(4,3,2,1))
mean(R[,1])
mean(R[,2])
mean(R[,3])
mean(R[,4])
ac.ranking(R, c(4,3,2,1))
ac.ranking(combinedData, 1:12)
ac.ranking(combinedData[1], 1)
ac.ranking(combinedData[,1], 1)
ac.ranking(combinedData[,1:2], 1:2)
ac.ranking(combinedData, 1:12)
ac.ranking(combinedData, 1:11)
ac.ranking(combinedData[,1:11], 1:11)
library(PortfolioAnalytics)
library(mice)
library(zoo)
library(xts)
library(rootSolve)
# Data----
result <- read.csv(".combined.csv")
result1 <- result[,2:13]
imputed_Data <- mice(result1, m=1, maxit = 50, method = 'pmm', seed = 500)
result[,2:13] <- complete(imputed_Data)
combinedData <- result
combinedData[,1] <- as.Date(as.character(combinedData[,1]), format='%m/%d/%Y')
combinedData <- as.xts(combinedData[,2:13],combinedData[,1])
rm(result, result1, imputed_Data)
GSoC <- colnames(combinedData)
pspec <- portfolio.spec(assets = GSoC)
pspec <- add.constraint(portfolio=pspec, type="weight_sum", min_sum=1, max_sum=1)
pspec
library(PortfolioAnalytics)
library(mice)
library(zoo)
library(xts)
library(rootSolve)
# Data----
result <- read.csv(".combined.csv")
result1 <- result[,2:13]
imputed_Data <- mice(result1, m=1, maxit = 50, method = 'pmm', seed = 500)
result[,2:13] <- complete(imputed_Data)
combinedData <- result
combinedData[,1] <- as.Date(as.character(combinedData[,1]), format='%m/%d/%Y')
combinedData <- as.xts(combinedData[,2:13],combinedData[,1])
rm(result, result1, imputed_Data)
GSoC <- colnames(combinedData)
pspec <- portfolio.spec(assets = GSoC)
pspec <- add.constraint(portfolio=pspec, type="full_investment")
library(PortfolioAnalytics)
library(mice)
library(zoo)
library(xts)
library(rootSolve)
# Data----
# result <- read.csv(".combined.csv")
# result1 <- result[,2:13]
# imputed_Data <- mice(result1, m=1, maxit = 50, method = 'pmm', seed = 500)
# result[,2:13] <- complete(imputed_Data)
# combinedData <- result
# combinedData[,1] <- as.Date(as.character(combinedData[,1]), format='%m/%d/%Y')
# combinedData <- as.xts(combinedData[,2:13],combinedData[,1])
# rm(result, result1, imputed_Data)
GSoC <- colnames(combinedData)
pspec <- portfolio.spec(assets = GSoC)
pspec <- add.constraint(portfolio=pspec, type="full_investment")
pspec <- add.constraint(portfolio=pspec, type="long_only")
portf$constraints[[1]]
library(PortfolioAnalytics, zoo, xts, rootSolve, foreach)
library(PerformanceAnalytics, quantmod, DEoptim, iterators, fGarch,
Rglpk, quadprog, ROI, ROI.plugin.glpk, ROI.plugin.quadprog,
ROI.plugin.symphony, pso, GenSA, corpcor, testthat, nloptr,
MASS, robustbase)
install.packages(rootSolve)
install.packages("rootSolve")
library(PortfolioAnalytics, zoo, xts, rootSolve, foreach)
library(rootSolve)
library(PortfolioAnalytics)
library(zoo)
library(xts)
library(rootSolve)
library(foreach)
library(PerformanceAnalytics)
library(quantmod)
library(DEoptim)
library(iterators)
library(fGarch)
library(Rglpk)
library(quadprog)
library(ROI)
library(ROI.plugin.glpk)
library(ROI.plugin.quadprog)
library(ROI.plugin.symphony)
library(pso)
library(GenSA, corpcor)
library(testthat, nloptr)
library(MASS, robustbase)
install.packages("DEoptim")
library(PortfolioAnalytics)
library(zoo)
library(xts)
library(rootSolve)
library(foreach)
library(PerformanceAnalytics)
library(quantmod)
library(DEoptim)
library(PortfolioAnalytics)
library(zoo)
library(xts)
library(rootSolve)
library(foreach)
library(PerformanceAnalytics)
library(quantmod)
library(DEoptim)
library(iterators)
library(fGarch)
install.packages(fGarch)
install.packages("fGarch")
library(Rglpk)
install.packages("Rglpk")
install.packages("quadprog")
install.packages("quadprog")
install.packages("ROI")
install.packages("ROI.plugin.glpk")
install.packages("ROI.plugin.quadprog")
install.packages("ROI.plugin.symphony")
install.packages("pso")
install.packages("GenSA")
install.packages("corpcor")
install.packages("testthat")
install.packages("nloptr")
install.packages("MASS")
install.packages("robustbase")
library(PortfolioAnalytics)
library(zoo)
library(xts)
library(rootSolve)
library(foreach)
library(PerformanceAnalytics)
library(quantmod)
library(DEoptim)
library(iterators)
library(fGarch)
library(Rglpk)
library(quadprog)
library(ROI)
library(ROI.plugin.glpk)
library(ROI.plugin.quadprog)
library(ROI.plugin.symphony)
library(pso)
library(GenSA)
library(corpcor)
library(testthat)
library(nloptr)
library(MASS)
library(robustbase)
library(PortfolioAnalytics)
library(zoo)
library(xts)
library(rootSolve)
library(foreach)
library(PerformanceAnalytics)
library(quantmod)
library(DEoptim)
library(iterators)
library(fGarch)
library(Rglpk)
library(quadprog)
library(ROI)
library(ROI.plugin.glpk)
library(ROI.plugin.quadprog)
library(ROI.plugin.symphony)
library(pso)
library(GenSA)
library(corpcor)
library(testthat)
library(nloptr)
library(MASS)
library(robustbase)
library(PortfolioAnalytics)
library(zoo)
library(xts)
library(rootSolve)
library(foreach)
library(PerformanceAnalytics)
library(quantmod)
library(DEoptim)
library(iterators)
library(fGarch)
library(Rglpk)
library(quadprog)
library(ROI)
library(ROI.plugin.glpk)
library(ROI.plugin.quadprog)
library(ROI.plugin.symphony)
library(pso)
library(GenSA)
library(corpcor)
library(testthat)
library(nloptr)
library(MASS)
library(robustbase)
rm(R)
rm(edhex)
rm(edhec)
# Depended Packages:----
library(PortfolioAnalytics)
library(zoo)
library(xts)
library(rootSolve)
library(foreach)
library(PerformanceAnalytics)
# Suggested Packages:----
library(quantmod)
library(DEoptim)
library(iterators)
library(fGarch)
library(Rglpk)
library(quadprog)
library(ROI)
library(ROI.plugin.glpk)
library(ROI.plugin.quadprog)
library(ROI.plugin.symphony)
library(pso)
library(GenSA)
library(corpcor)
library(testthat)
library(nloptr)
library(MASS)
library(robustbase)
# Data----
# result <- read.csv(".combined.csv")
# result1 <- result[,2:13]
# imputed_Data <- mice(result1, m=1, maxit = 50, method = 'pmm', seed = 500)
# result[,2:13] <- complete(imputed_Data)
# combinedData <- result
# combinedData[,1] <- as.Date(as.character(combinedData[,1]), format='%m/%d/%Y')
# combinedData <- as.xts(combinedData[,2:13],combinedData[,1])
# rm(result, result1, imputed_Data)
GSoC <- colnames(combinedData)
pspec <- portfolio.spec(assets = GSoC)
pspec <- add.constraint(portfolio=pspec, type="full_investment")
pspec <- add.constraint(portfolio=pspec, type="long_only")
portf.maxMean <- add.objective(pspec, type="return", name="mean")
portf.minStdDev <- add.objective(pspec, type="risk", name="StdDev")
# Depended Packages:----
library(PortfolioAnalytics)
library(zoo)
library(xts)
library(rootSolve)
library(foreach)
library(PerformanceAnalytics)
# Suggested Packages:----
library(quantmod)
library(DEoptim)
library(iterators)
library(fGarch)
library(Rglpk)
library(quadprog)
library(ROI)
library(ROI.plugin.glpk)
library(ROI.plugin.quadprog)
library(ROI.plugin.symphony)
library(pso)
library(GenSA)
library(corpcor)
library(testthat)
library(nloptr)
library(MASS)
library(robustbase)
# Data----
# result <- read.csv(".combined.csv")
# result1 <- result[,2:13]
# imputed_Data <- mice(result1, m=1, maxit = 50, method = 'pmm', seed = 500)
# result[,2:13] <- complete(imputed_Data)
# combinedData <- result
# combinedData[,1] <- as.Date(as.character(combinedData[,1]), format='%m/%d/%Y')
# combinedData <- as.xts(combinedData[,2:13],combinedData[,1])
# rm(result, result1, imputed_Data)
GSoC <- colnames(combinedData)
pspec <- portfolio.spec(assets = GSoC)
pspec <- add.constraint(portfolio=pspec, type="full_investment")
pspec <- add.constraint(portfolio=pspec, type="long_only")
pspec <- add.objective(pspec, type="return", name="mean")
pspec <- add.objective(pspec, type="risk", name="StdDev")
View(pspec)
# Depended Packages:----
library(PortfolioAnalytics)
library(zoo)
library(xts)
library(rootSolve)
library(foreach)
library(PerformanceAnalytics)
# Suggested Packages:----
library(quantmod)
library(DEoptim)
library(iterators)
library(fGarch)
library(Rglpk)
library(quadprog)
library(ROI)
library(ROI.plugin.glpk)
library(ROI.plugin.quadprog)
library(ROI.plugin.symphony)
library(pso)
library(GenSA)
library(corpcor)
library(testthat)
library(nloptr)
library(MASS)
library(robustbase)
# Data----
# result <- read.csv(".combined.csv")
# result1 <- result[,2:13]
# imputed_Data <- mice(result1, m=1, maxit = 50, method = 'pmm', seed = 500)
# result[,2:13] <- complete(imputed_Data)
# combinedData <- result
# combinedData[,1] <- as.Date(as.character(combinedData[,1]), format='%m/%d/%Y')
# combinedData <- as.xts(combinedData[,2:13],combinedData[,1])
# rm(result, result1, imputed_Data)
GSoC <- colnames(combinedData)
pspec <- portfolio.spec(assets = GSoC)
pspec <- add.constraint(portfolio=pspec, type="full_investment")
pspec <- add.constraint(portfolio=pspec, type="long_only")
pspec <- add.objective(pspec, type="return", name="mean")
pspec <- add.objective(pspec, type="risk", name="StdDev")
portfolioDetail <- optimize.portfolio.rebalancing(R=combinedData, pspec,rebalance_on='months',
training_period = 12)
View(combinedData)
portfolioDetail
extractWeights(portfolioDetail)
weights <- extractWeights(portfolioDetail)
returns <- Return.rebalancing(R=securities_matrix, weights=extractWeights(portfolioDetail))
weights <- extractWeights(portfolioDetail)
returns <- Return.rebalancing(R=combinedData, weights=extractWeights(portfolioDetail))
# Depended Packages:----
library(PortfolioAnalytics)
library(zoo)
library(xts)
library(rootSolve)
library(foreach)
library(PerformanceAnalytics)
# Suggested Packages:----
library(quantmod)
library(DEoptim)
library(iterators)
library(fGarch)
library(Rglpk)
library(quadprog)
library(ROI)
library(ROI.plugin.glpk)
library(ROI.plugin.quadprog)
library(ROI.plugin.symphony)
library(pso)
library(GenSA)
library(corpcor)
library(testthat)
library(nloptr)
library(MASS)
library(robustbase)
# Data----
result <- read.csv(".combined.csv")
result1 <- result[,2:13]
imputed_Data <- mice(result1, m=1, maxit = 50, method = 'pmm', seed = 500)
result[,2:13] <- complete(imputed_Data)
combinedData <- result
combinedData[,1] <- as.Date(as.character(combinedData[,1]), format='%m/%d/%Y')
combinedData <- as.xts(combinedData[,2:13],combinedData[,1])
rm(result, result1, imputed_Data)
# Portfolio ----
GSoC <- colnames(combinedData)
pspec <- portfolio.spec(assets = GSoC)
# make a no leverage, long only portfolio based on given 12 CTAs
pspec <- add.constraint(portfolio=pspec, type="full_investment")
pspec <- add.constraint(portfolio=pspec, type="long_only")
pspec <- add.constraint(portfolio = pspec, type="position_limit", max_pos=10)
# we want to maximine return per sd
pspec <- add.objective(pspec, type="return", name="mean")
pspec <- add.objective(pspec, type="risk", name="StdDev")
portfolioDetail <- optimize.portfolio.rebalancing(R=combinedData, pspec,rebalance_on='months',
training_period = 12)
weights <- extractWeights(portfolioDetail)
returns <- Return.rebalancing(R=combinedData, weights=extractWeights(portfolioDetail))
